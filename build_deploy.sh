#!/bin/bash

# =============================================================================
# SCRIPT DE BUILD & DEPLOY PARA HISTORICAL VARIABILITY ANALYZER
# Multi-Environment: DEV, QUA, PRO
# =============================================================================

set -e  # Salir si hay alg√∫n error

# =============================================================================
# CONFIGURACI√ìN DE AMBIENTES
# =============================================================================

# Detectar proyecto activo de gcloud
CURRENT_PROJECT=$(gcloud config get-value project 2>/dev/null)

# Si se proporciona par√°metro, usarlo; si no, detectar autom√°ticamente
if [ -n "$1" ]; then
    # Par√°metro proporcionado expl√≠citamente
    ENVIRONMENT="$1"
    ENVIRONMENT=$(echo "$ENVIRONMENT" | tr '[:upper:]' '[:lower:]')  # Convertir a min√∫sculas
    
    # Validar ambiente
    if [[ ! "$ENVIRONMENT" =~ ^(dev|qua|pro)$ ]]; then
        echo "‚ùå Error: Ambiente inv√°lido '$ENVIRONMENT'"
        echo "Uso: ./build_deploy.sh [dev|qua|pro]"
        echo ""
        echo "Ejemplos:"
        echo "  ./build_deploy.sh dev    # Deploy en DEV (platform-partners-des)"
        echo "  ./build_deploy.sh qua    # Deploy en QUA (platform-partners-qua)"
        echo "  ./build_deploy.sh pro    # Deploy en PRO (platform-partners-pro)"
        echo ""
        echo "O ejecuta sin par√°metros para usar el proyecto activo de gcloud"
        exit 1
    fi
else
    # Detectar autom√°ticamente seg√∫n el proyecto activo
    echo "üîç Detectando ambiente desde proyecto activo de gcloud..."
    
    case "$CURRENT_PROJECT" in
        platform-partners-des)
            ENVIRONMENT="dev"
            echo "‚úÖ Detectado: DEV (platform-partners-des)"
            ;;
        platform-partners-qua)
            ENVIRONMENT="qua"
            echo "‚úÖ Detectado: QUA (platform-partners-qua)"
            ;;
        constant-height-455614-i0)
            ENVIRONMENT="pro"
            echo "‚úÖ Detectado: PRO (platform-partners-pro)"
            ;;
        *)
            echo "‚ö†Ô∏è  Proyecto activo: ${CURRENT_PROJECT}"
            echo "‚ö†Ô∏è  No se reconoce el proyecto. Usando DEV por defecto."
            ENVIRONMENT="dev"
            ;;
    esac
fi

# Configuraci√≥n seg√∫n ambiente
case "$ENVIRONMENT" in
    dev)
        PROJECT_ID="platform-partners-des"
        SERVICE_NAME="historical-variability-analyzer-dev"
        SERVICE_ACCOUNT="streamlit-bigquery-sa@platform-partners-des.iam.gserviceaccount.com"
        ;;
    qua)
        PROJECT_ID="platform-partners-qua"
        SERVICE_NAME="historical-variability-analyzer-qua"
        SERVICE_ACCOUNT="streamlit-bigquery-sa@platform-partners-qua.iam.gserviceaccount.com"
        ;;
    pro)
        PROJECT_ID="constant-height-455614-i0"
        SERVICE_NAME="historical-variability-analyzer"
        SERVICE_ACCOUNT="streamlit-bigquery-sa@constant-height-455614-i0.iam.gserviceaccount.com"
        ;;
esac

REGION="us-east1"
IMAGE_TAG="gcr.io/${PROJECT_ID}/${SERVICE_NAME}"

echo "üöÄ Iniciando Build & Deploy para Historical Variability Analyzer"
echo "================================================================"
echo "üåç AMBIENTE: ${ENVIRONMENT^^}"
echo "üìã Configuraci√≥n:"
echo "   Proyecto: ${PROJECT_ID}"
echo "   Servicio: ${SERVICE_NAME}"
echo "   Regi√≥n: ${REGION}"
echo "   Imagen: ${IMAGE_TAG}"
echo "   Service Account: ${SERVICE_ACCOUNT}"
echo ""

# Verificar que estamos en el directorio correcto
if [ ! -f "dashboard.py" ]; then
    echo "‚ùå Error: dashboard.py no encontrado. Ejecuta este script desde el directorio calls_historical_variability/"
    exit 1
fi

# Verificar que gcloud est√° configurado
if ! command -v gcloud &> /dev/null; then
    echo "‚ùå Error: gcloud CLI no est√° instalado o no est√° en el PATH"
    exit 1
fi

# Verificar proyecto activo
CURRENT_PROJECT=$(gcloud config get-value project)
if [ "$CURRENT_PROJECT" != "$PROJECT_ID" ]; then
    echo "‚ö†Ô∏è  Proyecto actual: ${CURRENT_PROJECT}"
    echo "üîß Configurando proyecto a: ${PROJECT_ID}"
    gcloud config set project ${PROJECT_ID}
fi

echo ""
echo "üì¶ PASO 1: PREPARACI√ìN (Copiando m√≥dulo shared y verificando archivos)"
echo "======================================================================="

# Copiar m√≥dulo shared al directorio actual
if [ -d "../analysis_predictive_shared" ]; then
    echo "üìÇ Copiando analysis_predictive_shared..."
    cp -r ../analysis_predictive_shared ./analysis_predictive_shared
    echo "‚úÖ M√≥dulo shared copiado"
else
    echo "‚ö†Ô∏è  Advertencia: No se encontr√≥ ../analysis_predictive_shared"
    echo "‚ö†Ô∏è  El dashboard funcionar√° sin estilos compartidos"
fi

# Verificar archivos necesarios
if [ -f "dashboard.py" ]; then
    echo "‚úÖ dashboard.py encontrado"
else
    echo "‚ùå dashboard.py no encontrado"
    exit 1
fi

if [ -f "requirements.txt" ]; then
    echo "‚úÖ requirements.txt encontrado"
else
    echo "‚ùå requirements.txt no encontrado"
    exit 1
fi

if [ -f "Dockerfile" ]; then
    echo "‚úÖ Dockerfile encontrado"
else
    echo "‚ùå Dockerfile no encontrado"
    exit 1
fi

# Verificar traducciones compiladas
if [ -d "locales" ]; then
    echo "‚úÖ Directorio locales encontrado"
    
    # Compilar traducciones si es necesario
    if [ -f "compile_translations.py" ]; then
        echo "üîÑ Compilando traducciones..."
        python3 compile_translations.py
        echo "‚úÖ Traducciones compiladas"
    fi
else
    echo "‚ö†Ô∏è  Advertencia: No se encontr√≥ directorio locales"
fi

echo ""
echo "üî® PASO 2: BUILD (Creando imagen Docker)"
echo "=========================================="
gcloud builds submit --tag ${IMAGE_TAG}

# Limpiar m√≥dulo shared copiado
if [ -d "./analysis_predictive_shared" ]; then
    echo "üßπ Limpiando archivos temporales..."
    rm -rf ./analysis_predictive_shared
    echo "‚úÖ Limpieza completada"
fi

if [ $? -eq 0 ]; then
    echo "‚úÖ Build exitoso!"
else
    echo "‚ùå Error en el build"
    exit 1
fi

echo ""
echo "üöÄ PASO 3: DEPLOY (Desplegando a Cloud Run)"
echo "============================================="
gcloud run deploy ${SERVICE_NAME} \
    --image ${IMAGE_TAG} \
    --platform managed \
    --region ${REGION} \
    --allow-unauthenticated \
    --port 8501 \
    --service-account ${SERVICE_ACCOUNT}

if [ $? -eq 0 ]; then
    echo "‚úÖ Deploy exitoso!"
else
    echo "‚ùå Error en el deploy"
    exit 1
fi

echo ""
echo "üéâ ¬°DEPLOY COMPLETADO EXITOSAMENTE!"
echo "=================================="
echo ""
echo "üåç AMBIENTE: ${ENVIRONMENT^^}"
echo "üìä Para ver tu dashboard:"
echo "   1. Ve a: https://console.cloud.google.com/run?project=${PROJECT_ID}"
echo "   2. Selecciona el servicio: ${SERVICE_NAME}"
echo "   3. Haz clic en la URL del servicio"
echo ""
echo "üîß Para ver logs en tiempo real:"
echo "   gcloud logs tail --service=${SERVICE_NAME} --region=${REGION} --project=${PROJECT_ID}"
echo ""
echo "üîÑ Para deploy en otros ambientes:"
echo "   ./build_deploy.sh dev    # Deploy en DEV (platform-partners-des)"
echo "   ./build_deploy.sh qua    # Deploy en QUA (platform-partners-qua)"
echo "   ./build_deploy.sh pro    # Deploy en PRO (platform-partners-pro)"
echo ""
echo "üõë Para detener el servicio:"
echo "   gcloud run services delete ${SERVICE_NAME} --region=${REGION} --project=${PROJECT_ID}"
echo ""
echo "üìù Notas:"
echo "   - DEV (platform-partners-des): Para desarrollo y testing (solo t√∫)"
echo "   - QUA (platform-partners-qua): Para validaci√≥n y QA (equipo interno)"
echo "   - PRO (platform-partners-pro): Para usuarios finales (producci√≥n)"
